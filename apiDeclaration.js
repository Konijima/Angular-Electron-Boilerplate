const ts = require('typescript');
const path = require('path');
const fs = require('fs');
const prettier = require('prettier');

function generateTypeDefinitions(folderPath, outputFile) {
  const files = fs.readdirSync(folderPath).filter((file) => file.endsWith('.ts'));

  const program = ts.createProgram(files.map((file) => path.join(folderPath, file)), {
    target: ts.ScriptTarget.ESNext,
    module: ts.ModuleKind.CommonJS,
    declaration: true,
    emitDeclarationOnly: true,
    outDir: folderPath,
  });

  const interfaces = [];
  const objects = [];

  const writeFileCallback = (filePath, data, writeByteOrderMark, onError, sourceFiles) => {
    if (filePath.endsWith('.d.ts')) {
      const lines = data.split(/\n/);
      let inInterface = false;
      let currentInterface = '';
      let currentComment = '';
      lines.forEach((line) => {
        if (line.startsWith('/**')) {
          currentComment = line;
        } else if (line.startsWith(' * ')) {
          currentComment += '\n' + line;
        } else if (line.startsWith(' */')) {
          currentComment += '\n' + line;
        } else if (line.startsWith('export interface')) {
          inInterface = true;
          currentInterface = currentComment + '\n' + line.replace('export ', '');
          currentComment = '';
        } else if (inInterface) {
          if (line.startsWith('}')) {
            inInterface = false;
            interfaces.push(currentInterface + '\n' + line);
          } else {
            currentInterface += '\n' + line;
          }
        } else if (line.trim().length > 0 && !line.startsWith('export class') && !line.startsWith('export type') && !line.startsWith('import ')) {
          objects.push(currentComment + line.replace(/(export|declare|const)\s+/g, ''));
          currentComment = '';
        }
      });
    } else {
      fs.writeFileSync(filePath, data, { encoding: 'utf8', flag: 'w' });
    }
  };

  program.emit(undefined, writeFileCallback);

  const wrappedDeclarations = `
// Generated by apiDeclaration.js script - DO NOT EDIT MANUALLY
// Last update: ${new Date().toISOString()}
declare global {
${interfaces.map((intf) => '  ' + intf).join('\n')}
  interface Window {
${objects.map((obj) => '    ' + obj.replace(/\n/g, '\n    ')).join('\n')}
  }
}

export {};`;

  // Format the wrappedDeclarations string with Prettier
  const formattedDeclarations = prettier.format(wrappedDeclarations, { parser: 'typescript' });
  fs.writeFileSync(outputFile, formattedDeclarations, 'utf8');
}

const folderPath = path.resolve(__dirname, 'electron', 'API');
const outputFile = path.resolve(__dirname, 'src', 'electron.d.ts');
generateTypeDefinitions(folderPath, outputFile);

console.log('[electron.d.ts] has been updated successfully!');
